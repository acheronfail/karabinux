use input_linux::Key;

pub trait FromKBKeyCode {
    fn from_kb_key_code(key_code: &str) -> Option<Self>
    where
        Self: Sized;
}

impl FromKBKeyCode for Key {
    fn from_kb_key_code(key_code: &str) -> Option<Key> {
        match key_code {
            "caps_lock" => Some(Key::KeyCapsLock),
            // TODO: handle pairs, ie: "shift" is either "left" or "right"
            "left_control" => Some(Key::KeyLeftCtrl),
            "left_shift" => Some(Key::KeyLeftShift),
            "left_option" => Some(Key::KeyLeftAlt), // Alias for alt
            "left_command" => Some(Key::KeyLeftMeta), // Alias for meta
            "right_control" => Some(Key::KeyRightCtrl),
            "right_shift" => Some(Key::KeyRightShift),
            "right_option" => Some(Key::KeyRightAlt), // Alias for alt
            "right_command" => Some(Key::KeyRightMeta), // Alias for meta
            "fn" => Some(Key::KeyFn),
            "return_or_enter" => Some(Key::KeyEnter),
            "escape" => Some(Key::KeyEsc),
            "delete_or_backspace" => Some(Key::KeyBackspace),
            "delete_forward" => Some(Key::KeyDelete),
            "tab" => Some(Key::KeyTab),
            "spacebar" => Some(Key::KeySpace),
            "hyphen" => Some(Key::KeyMinus),
            "equal_sign" => Some(Key::KeyEqual),
            "open_bracket" => Some(Key::KeyLeftBrace),
            "close_bracket" => Some(Key::KeyRightBrace),
            "backslash" => Some(Key::KeyBackslash),
            // "non_us_pound" => Some(Key::Key),
            "semicolon" => Some(Key::KeySemicolon),
            "quote" => Some(Key::KeyApostrophe),
            "grave_accent_and_tilde" => Some(Key::KeyGrave),
            "comma" => Some(Key::KeyComma),
            "period" => Some(Key::KeyDot),
            "slash" => Some(Key::KeySlash),
            // "non_us_backslash" => Some(Key::Key),
            "up_arrow" => Some(Key::KeyUp),
            "down_arrow" => Some(Key::KeyDown),
            "left_arrow" => Some(Key::KeyLeft),
            "right_arrow" => Some(Key::KeyRight),
            "page_up" => Some(Key::KeyPageUp),
            "page_down" => Some(Key::KeyPageDown),
            "home" => Some(Key::KeyHome),
            "end" => Some(Key::KeyEnd),
            "a" => Some(Key::KeyA),
            "b" => Some(Key::KeyB),
            "c" => Some(Key::KeyC),
            "d" => Some(Key::KeyD),
            "e" => Some(Key::KeyE),
            "f" => Some(Key::KeyF),
            "g" => Some(Key::KeyG),
            "h" => Some(Key::KeyH),
            "i" => Some(Key::KeyI),
            "j" => Some(Key::KeyJ),
            "k" => Some(Key::KeyK),
            "l" => Some(Key::KeyL),
            "m" => Some(Key::KeyM),
            "n" => Some(Key::KeyN),
            "o" => Some(Key::KeyO),
            "p" => Some(Key::KeyP),
            "q" => Some(Key::KeyQ),
            "r" => Some(Key::KeyR),
            "s" => Some(Key::KeyS),
            "t" => Some(Key::KeyT),
            "u" => Some(Key::KeyU),
            "v" => Some(Key::KeyV),
            "w" => Some(Key::KeyW),
            "x" => Some(Key::KeyX),
            "y" => Some(Key::KeyY),
            "z" => Some(Key::KeyZ),
            "1" => Some(Key::Key1),
            "2" => Some(Key::Key2),
            "3" => Some(Key::Key3),
            "4" => Some(Key::Key4),
            "5" => Some(Key::Key5),
            "6" => Some(Key::Key6),
            "7" => Some(Key::Key7),
            "8" => Some(Key::Key8),
            "9" => Some(Key::Key9),
            "0" => Some(Key::Key0),
            "f1" => Some(Key::KeyF1),
            "f2" => Some(Key::KeyF2),
            "f3" => Some(Key::KeyF3),
            "f4" => Some(Key::KeyF4),
            "f5" => Some(Key::KeyF5),
            "f6" => Some(Key::KeyF6),
            "f7" => Some(Key::KeyF7),
            "f8" => Some(Key::KeyF8),
            "f9" => Some(Key::KeyF9),
            "f10" => Some(Key::KeyF10),
            "f11" => Some(Key::KeyF11),
            "f12" => Some(Key::KeyF12),
            "f13" => Some(Key::KeyF13),
            "f14" => Some(Key::KeyF14),
            "f15" => Some(Key::KeyF15),
            "f16" => Some(Key::KeyF16),
            "f17" => Some(Key::KeyF17),
            "f18" => Some(Key::KeyF18),
            "f19" => Some(Key::KeyF19),
            "f20" => Some(Key::KeyF20),
            "f21" => Some(Key::KeyF21),
            "f22" => Some(Key::KeyF22),
            "f23" => Some(Key::KeyF23),
            "f24" => Some(Key::KeyF24),
            "display_brightness_decrement" => Some(Key::KeyBrightnessDown),
            "display_brightness_increment" => Some(Key::KeyBrightnessUp),
            // "mission_control" => Some(Key::Key),
            // "launchpad" => Some(Key::Key),
            // "dashboard" => Some(Key::Key),
            "illumination_decrement" => Some(Key::KeyIllumDown),
            "illumination_increment" => Some(Key::KeyIllumUp),
            "rewind" => Some(Key::KeyRewind),
            "play_or_pause" => Some(Key::KeyPlayPause),
            "fastforward" => Some(Key::KeyFastForward),
            "mute" => Some(Key::KeyMute),
            "volume_decrement" => Some(Key::KeyVolumeDown),
            "volume_increment" => Some(Key::KeyVolumeUp),
            "eject" => Some(Key::KeyEjectCD),
            // "apple_display_brightness_decrement" => Some(Key::Key),
            // "apple_display_brightness_increment" => Some(Key::Key),
            // "apple_top_case_display_brightness_decrement" => Some(Key::Key),
            // "apple_top_case_display_brightness_increment" => Some(Key::Key),
            "keypad_num_lock" => Some(Key::KeyNumLock),
            "keypad_slash" => Some(Key::KeyKpSlash),
            "keypad_asterisk" => Some(Key::KeyKpAsterisk),
            "keypad_hyphen" => Some(Key::KeyKpMinus),
            "keypad_plus" => Some(Key::KeyKpPlus),
            "keypad_enter" => Some(Key::KeyKpEnter),
            "keypad_1" => Some(Key::KeyKp1),
            "keypad_2" => Some(Key::KeyKp2),
            "keypad_3" => Some(Key::KeyKp3),
            "keypad_4" => Some(Key::KeyKp4),
            "keypad_5" => Some(Key::KeyKp5),
            "keypad_6" => Some(Key::KeyKp6),
            "keypad_7" => Some(Key::KeyKp7),
            "keypad_8" => Some(Key::KeyKp8),
            "keypad_9" => Some(Key::KeyKp9),
            "keypad_0" => Some(Key::KeyKp0),
            "keypad_period" => Some(Key::KeyKpDot),
            "keypad_equal_sign" => Some(Key::KeyKpEqual),
            "keypad_comma" => Some(Key::KeyKpComma),
            // "vk_none" => Some(Key::Key),
            "print_screen" => Some(Key::KeyPrint),
            "scroll_lock" => Some(Key::KeyScrollLock),
            "pause" => Some(Key::KeyPause),
            "insert" => Some(Key::KeyInsert),
            // "application" => Some(Key::Key),
            "help" => Some(Key::KeyHelp),
            "power" => Some(Key::KeyPower),
            // "execute" => Some(Key::Key),
            "menu" => Some(Key::KeyMenu),
            "select" => Some(Key::KeySelect),
            "stop" => Some(Key::KeyStop),
            "again" => Some(Key::KeyAgain),
            "undo" => Some(Key::KeyUndo),
            "cut" => Some(Key::KeyCut),
            "copy" => Some(Key::KeyCopy),
            "paste" => Some(Key::KeyPaste),
            "find" => Some(Key::KeyFind),
            // "international1" => Some(Key::Key),
            // "international2" => Some(Key::Key),
            // "international3" => Some(Key::Key),
            // "international4" => Some(Key::Key),
            // "international5" => Some(Key::Key),
            // "international6" => Some(Key::Key),
            // "international7" => Some(Key::Key),
            // "international8" => Some(Key::Key),
            // "international9" => Some(Key::Key),
            // "lang1" => Some(Key::Key),
            // "lang2" => Some(Key::Key),
            // "lang3" => Some(Key::Key),
            // "lang4" => Some(Key::Key),
            // "lang5" => Some(Key::Key),
            // "lang6" => Some(Key::Key),
            // "lang7" => Some(Key::Key),
            // "lang8" => Some(Key::Key),
            // "lang9" => Some(Key::Key),
            // "japanese_eisuu" => Some(Key::Key),
            // "japanese_kana" => Some(Key::Key),
            // "japanese_pc_nfer" => Some(Key::Key),
            // "japanese_pc_xfer" => Some(Key::Key),
            // "japanese_pc_katakana" => Some(Key::Key),
            // "keypad_equal_sign_as400" => Some(Key::Key),
            // "locking_caps_lock" => Some(Key::Key),
            // "locking_num_lock" => Some(Key::Key),
            // "locking_scroll_lock" => Some(Key::Key),
            "alternate_erase" => Some(Key::KeyAlterase),
            // "sys_req_or_attention" => Some(Key::Key),
            "cancel" => Some(Key::KeyCancel),
            "clear" => Some(Key::KeyClear),
            // "prior" => Some(Key::Key),
            // "return" => Some(Key::Key),
            // "separator" => Some(Key::Key),
            // "out" => Some(Key::Key),
            // "oper" => Some(Key::Key),
            // "clear_or_again" => Some(Key::Key),
            // "cr_sel_or_props" => Some(Key::Key),
            // "ex_sel" => Some(Key::Key),
            "left_alt" => Some(Key::KeyLeftAlt),
            "left_gui" => Some(Key::KeyLeftMeta), // Alias for meta
            "right_alt" => Some(Key::KeyRightAlt),
            "right_gui" => Some(Key::KeyRightMeta), // Alias for meta
            // "vk_consumer_brightness_down" => Some(Key::Key),
            // "vk_consumer_brightness_up" => Some(Key::Key),
            // "vk_mission_control" => Some(Key::Key),
            // "vk_launchpad" => Some(Key::Key),
            // "vk_dashboard" => Some(Key::Key),
            // "vk_consumer_illumination_down" => Some(Key::Key),
            // "vk_consumer_illumination_up" => Some(Key::Key),
            // "vk_consumer_previous" => Some(Key::Key),
            // "vk_consumer_play" => Some(Key::Key),
            // "vk_consumer_next" => Some(Key::Key),
            "volume_down" => Some(Key::KeyVolumeDown),
            "volume_up" => Some(Key::KeyVolumeUp),
            _ => {
                eprintln!("Failed to decode key_code: {}", key_code);

                None
            }
        }
    }
}
